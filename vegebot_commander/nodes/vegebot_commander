#!/usr/bin/env python

import rospy
from std_msgs.msg import String, Bool

import sys
import time
import copy
from copy import deepcopy
import moveit_commander
from moveit_commander import MoveGroupCommander, PlanningSceneInterface, RobotCommander
import moveit_msgs.msg
import geometry_msgs.msg
from ur_msgs.srv import SetIO

from moveit_msgs.msg import RobotTrajectory
from moveit_msgs.msg import Constraints, OrientationConstraint
from trajectory_msgs.msg import JointTrajectoryPoint
from geometry_msgs.msg import PoseStamped, Pose

#import ur_msgs

VEGEBOT_SIMULATION_PARAM = "/vegebot/simulation"
VEGEBOT_STATUS_TOPIC = "/vegebot/status"
IS_A_SIMULATION = False
DISABLE_MOVEMENT = False
DISABLE_IO = False 
CARTESIAN_APPROACH = True

PICK_POSITION = [ 1.0, 0.0, 0.5]
PICK_ORIENTATION= [ 0.5, -0.5, -0.5, -0.5]

PARK_POSITION = [ 0.38309, -0.39763, 0.93282]
PARK_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]

PLACE_POSITION = [ -0.2, -0.7, 0.93282]
PLACE_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]

SCAN_POSITION = [ 0.9, 0.0, 0.8]
SCAN_ORIENTATION= [ 0.5, -0.5, -0.5, -0.5]
SCAN_POSITION_PARAM = '/vegebot/scan_position'

END_EFFECTOR_TO_LETTUCE_Z = 0.14
PREGRASP_OFFSET = [0.0, 0.0, 0.3]
TARGET_END_EFFECTOR_OFFSET = [0.0, 0.0, END_EFFECTOR_TO_LETTUCE_Z]

BASE_ORIGIN_TO_URSCRIPT_ORIGIN = [0.0, 0.0, -0.58]

URF10_ORIGIN = [0.0, 0.0, 0.0]

MAX_PLANNING_ATTEMPTS = 10

UR10_DIGITAL_IO_OUT = 1
UR10_BLADE_PIN8 = 16
UR10_BLADE_PIN9 = 17
UR10_DIGITAL_SET_VOLTAGE=4
UR10_DIGITAL_IO_VOLTAGE=12

VELOCITY_SCALE = 0.75

Robot = 0
Scene = 0
Manipulator = 0
Snapshot_publisher = 0
Next_action = None
Last_action = None
Current_reference_position = []
Status_publisher = None
Vegebot_arm = None

# MoveIt routines        


############################# Arm Controller #####################################        

class ArmController():

    def __init__(self):
        self.blade_strategy = BladeControllerUr10()
        #self.kinematics_controller = ArmKinematicsControllerMoveIt()
        self.kinematics_controller = ArmKinematicsControllerMoveItAndURScript()
        self.movement_strategy = MovementStrategyWithMixedControl(self.kinematics_controller)

    def set_target_position(self, position):
        position = self.offset_end_effector_from_lettuce(position)

        self.pregrasp_position = add_vectors(position, PREGRASP_OFFSET)
        self.pregrasp_position = add_vectors(self.pregrasp_position, TARGET_END_EFFECTOR_OFFSET)
        self.target_position = add_vectors(position, TARGET_END_EFFECTOR_OFFSET)

    def action_park(self):
        self.log("Parking...")
        #self.kinematics_controller.move_to(PARK_POSITION, PARK_ORIENTATION)  
        self.movement_strategy.move_park()  
        if (self.blade_strategy.blade_release()):
            return (True, "Park succeeded.", "pregrasp")
        else:
            return (False, "Release failed.", "release")

    def action_pregrasp(self):
        self.log("Executing pregrasp...")
        if (self.movement_strategy.move_pregrasp(self.pregrasp_position)):
            return (True, "Pregrasp succeeded.", "down")
        else:
            return (False, "Pregrasp FAILED.", "pregrasp")

    def action_down(self):
        self.log("Executing down...")
        if (self.movement_strategy.move_down(self.target_position)):
            return (True, "Down succeeded.", "cut")
        else:
            return (False, "Down FAILED.", "down")

    def action_cut(self):
        self.log("Executing cut...")
        if (self.blade_strategy.blade_cut()):
            return (True, "Cut succeeded.", "up")
        else:
            return (False, "Cut FAILED.", "cut")

    def action_up(self):
        self.log("Executing up...")
        if (self.movement_strategy.move_up(self.pregrasp_position)):
            return (True, "Up succeeded.", "place")
        else:
            return (False, "Up FAILED.", "up")

    def action_place(self):
        self.log("Executing place...")
        if (self.movement_strategy.move_place()):
            return (True, "Place succeeded.", "release")
        else:
            return (False, "Place FAILED.", "place")

    def action_release(self):
        self.log("Executing release...")
        if (self.blade_strategy.blade_release()):
            return (True, "Release succeeded.", "pregrasp")
        else:
            return (False, "Release FAILED.", "release")

    def action_full_pick_sequence(self):
        self.log("Executing full pick and place sequence...")
        it_worked, message, next_state = self.action_pregrasp()
        if (it_worked):
            it_worked, message, next_state = self.action_down()
            if (it_worked):
                it_worked, message, next_state = self.action_cut()
                if (it_worked):
                    it_worked, message, next_state = self.action_up()
                    if (it_worked):
                        it_worked, message, next_state = self.action_place()
                        if (it_worked):
                            it_worked, message, next_state = self.action_release()
                        else:
                            return (False, "Place failed.", "place")
                    else:    
                        return (False, "Up failed.", "place")
                else:
                    return (False, "Cut failed.", "place")
            else:
                return (False, "Down failed.", "place")
        else:
            return (False, "Pregrasp failed.", "place")
        return (it_worked, message, next_state) 

    def action_scan_position(self):
        print("Moving to camera position...")
        position, orientation = reload_scan_position()
        #self.kinematics_controller.move_to(position, orientation)  
        self.movement_strategy.move_scan(position, orientation)
                        
    def log(self, message):
        rospy.loginfo(message)   

    def offset_end_effector_from_lettuce(self, position):
        position[2] = position[2] + END_EFFECTOR_TO_LETTUCE_Z
        return position


#######################################################################################        

class MovementStrategy():
    def __init__(self, kinematics_controller):
        self.kinematics_controller = kinematics_controller

    def move_park(self):
        return self.kinematics_controller.move_to(PARK_POSITION, PARK_ORIENTATION)  

    def move_pregrasp(self, pregrasp_position):
        print("== Moving to pregrasp position...")
        return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_down(self, position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Approach lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to(position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(position, PICK_ORIENTATION)

    def move_up(self, pregrasp_position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Retreat from lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to(pregrasp_position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_place(self):
        return self.kinematics_controller.move_to(PLACE_POSITION, PLACE_ORIENTATION)

    def move_scan(self, position, orientation):
        self.kinematics_controller.move_to(position, orientation)          

class MovementStrategyDirect(MovementStrategy):
    pass

class MovementStrategyWithMixedControl(MovementStrategy):

    def move_up(self, pregrasp_position):
        return self.kinematics_controller.arm_controller_move_to(pregrasp_position, PICK_ORIENTATION)    

    def move_down(self, pregrasp_position):
        return self.kinematics_controller.arm_controller_move_to(pregrasp_position, PICK_ORIENTATION)    

class MovementStrategyWithWaypoints(MovementStrategy):

    def move_up(self, pregrasp_position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== MovementStrategyWithWaypoints: Retreat from lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to_with_orientation_constraint(pregrasp_position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_down(self, position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Approach lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to_with_orientation_constraint(position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(position, PICK_ORIENTATION)

#######################################################################################        

class ArmKinematicsControllerMoveIt():

    def __init__(self):
        self.start_moveit()

    def start_moveit(self):
        global Robot, Scene, Manipulator   

        print("== Setting up MoveIt!")
        moveit_commander.roscpp_initialize(sys.argv)
        Robot = RobotCommander() 
        print("== Getting Robot Groups")
        print(Robot.get_group_names())
        Scene = PlanningSceneInterface()
        Manipulator = MoveGroupCommander("manipulator")
        Manipulator.allow_replanning(True)
        print Robot.get_current_state()

    def move_to(self, position, orientation):
        global Manipulator

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        print("Moving...")
        print "== Setting target"
        pose_target = self.new_pose(position, orientation)
        Manipulator.set_pose_target(pose_target)
        #print Robot.get_current_state()

        print("== Devising plan")
        attempts = 0
        trajectory = None
        while (attempts < MAX_PLANNING_ATTEMPTS):
            print
            print "Planning attempt %s" % attempts
            trajectory = Manipulator.plan()
            if (self.plan_has_succeeded(trajectory)):
                break
            attempts = attempts + 1    
        if (not self.plan_has_succeeded(trajectory)):
            print("********* Could not find plan after %s attempts ********" % attempts)
            return False

        print("== Moving to target pose...")
        scaled_trajectory = self.scale_trajectory_speed(trajectory, VELOCITY_SCALE)
        result = Manipulator.execute(scaled_trajectory)
        print("----------------------------")
        print result
        print("----------------------------")
        # This following get_current_state() call appears to be necessary to normalize 
        # joint angles
        workaround = Robot.get_current_state()
        rospy.loginfo("== Move complete!")
        return result
        # return True

    def cartesian_move_to(self, position, orientation):
        global Manipulator

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        end_effector_link = Manipulator.get_end_effector_link()
        start_pose = Manipulator.get_current_pose(end_effector_link).pose
        end_pose = deepcopy(self.new_pose(position, orientation))
        waypoints=[]
        # Don-t add start point! 
        # http://answers.ros.org/question/253004/moveit-problem-error-trajectory-message-contains-waypoints-that-are-not-strictly-increasing-in-time/
        #waypoints.append(deepcopy(start_pose))
        waypoints.append(end_pose)

        fraction = 0.0
        max_tries = 100
        attempts = 0
        eef_step = 0.01
        jump_threshold = 0.0
        avoid_collisions = True
        while fraction < 1.0 and attempts < max_tries:
            (plan, fraction) = Manipulator.compute_cartesian_path(
                                            waypoints,
                                            eef_step,
                                            jump_threshold,
                                            avoid_collisions)
            attempts += 1
            if attempts % 100 == 0:
                rospy.loginfo("Still attempting cartesian after " + str(attempts) + " attempts...")
        if fraction==1.0:
            rospy.loginfo("******** Successfully found Carteian trajectory.")
            rospy.loginfo(start_pose.position)
            rospy.loginfo(end_pose.position)
            scaled_plan = self.scale_trajectory_speed(plan, VELOCITY_SCALE)
            Manipulator.execute(scaled_plan)
            workaround = Robot.get_current_state()
            rospy.loginfo("******** Successfully executed Carteian trajectory.")
            return True
        else:
            rospy.loginfo("Failed to find Cartesian trajectory after " + str(attempts) + " attempts...")
            return False

    def cartesian_move_to_with_orientation_constraint(self, position, orientation):
        global Manipulator

        rospy.loginfo("*** Adding vertical constraint ***")

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)
        start_pose = current_pose.pose
        end_pose = deepcopy(self.new_pose(position, orientation))
        waypoints=[]
        # Don-t add start point! 
        # http://answers.ros.org/question/253004/moveit-problem-error-trajectory-message-contains-waypoints-that-are-not-strictly-increasing-in-time/
        #waypoints.append(deepcopy(start_pose))
        waypoints.append(end_pose)

        # Create a contraints list and give it a name
        constraints = Constraints() 
        constraints.name = "Keep bucket vertical"
        # Create an orientation constraint for the right gripper
        orientation_constraint = OrientationConstraint()
        orientation_constraint.header = current_pose.header
        orientation_constraint.link_name = end_effector_link
        orientation_constraint.orientation.x = start_pose.orientation.x
        orientation_constraint.orientation.y = start_pose.orientation.y
        orientation_constraint.orientation.z = start_pose.orientation.z
        orientation_constraint.orientation.w = start_pose.orientation.w
        orientation_constraint.absolute_x_axis_tolerance = 0.1
        orientation_constraint.absolute_y_axis_tolerance = 0.1
        orientation_constraint.absolute_z_axis_tolerance = 3.14
        orientation_constraint.weight = 1.0        
        # Append the constraint to the list of contraints
        constraints.orientation_constraints.append(orientation_constraint)
        # Set the path constraints on the right_arm
        Manipulator.set_path_constraints(constraints)

        fraction = 0.0
        max_tries = 100
        attempts = 0
        eef_step = 0.01
        jump_threshold = 0.0
        avoid_collisions = True
        while fraction < 1.0 and attempts < max_tries:
            (plan, fraction) = Manipulator.compute_cartesian_path(
                                            waypoints,
                                            eef_step,
                                            jump_threshold,
                                            avoid_collisions)
            attempts += 1
            if attempts % 100 == 0:
                rospy.loginfo("Still attempting cartesian after " + str(attempts) + " attempts...")
        if fraction==1.0:
            rospy.loginfo("******** Successfully found Carteian trajectory.")
            rospy.loginfo(start_pose.position)
            rospy.loginfo(end_pose.position)
            scaled_plan = self.scale_trajectory_speed(plan, VELOCITY_SCALE)
            Manipulator.execute(scaled_plan)
            workaround = Robot.get_current_state()
            rospy.loginfo("******** Successfully executed Carteian trajectory.")
            return True
        else:
            rospy.loginfo("Failed to find Cartesian trajectory after " + str(attempts) + " attempts...")
            return False

    def plan_has_succeeded(self, trajectory):
        if (trajectory==None):
            return False
        if (len(trajectory.joint_trajectory.points)==0):
            return False
        return True        

    def new_pose(self, position, orientation):
        pose_target = geometry_msgs.msg.Pose()
        pose_target.orientation.x = orientation[0] #0.0
        pose_target.orientation.y = orientation[1] # 0.0
        pose_target.orientation.z = orientation[2] # 0.0
        pose_target.orientation.w = orientation[3] # 1.0
        pose_target.position.x = position[0] + URF10_ORIGIN[0]
        pose_target.position.y = position[1] + URF10_ORIGIN[1]
        pose_target.position.z = position[2] + URF10_ORIGIN[2]
        return pose_target

    def scale_trajectory_speed(self, traj, scale):
           # Create a new trajectory object
           new_traj = RobotTrajectory()
           
           # Initialize the new trajectory to be the same as the input trajectory
           new_traj.joint_trajectory = traj.joint_trajectory
           
           # Get the number of joints involved
           n_joints = len(traj.joint_trajectory.joint_names)
           
           # Get the number of points on the trajectory
           n_points = len(traj.joint_trajectory.points)
            
           # Store the trajectory points
           points = list(traj.joint_trajectory.points)
           
           # Cycle through all points and joints and scale the time from start,
           # as well as joint speed and acceleration
           for i in range(n_points):
               point = JointTrajectoryPoint()
               
               # The joint positions are not scaled so pull them out first
               point.positions = traj.joint_trajectory.points[i].positions

               # Next, scale the time_from_start for this point
               point.time_from_start = traj.joint_trajectory.points[i].time_from_start / scale
               
               # Get the joint velocities for this point
               point.velocities = list(traj.joint_trajectory.points[i].velocities)
               
               # Get the joint accelerations for this point
               point.accelerations = list(traj.joint_trajectory.points[i].accelerations)
               
               # Scale the velocity and acceleration for each joint at this point
               for j in range(n_joints):
                   point.velocities[j] = point.velocities[j] * scale
                   point.accelerations[j] = point.accelerations[j] * scale * scale
            
               # Store the scaled trajectory point
               points[i] = point

           # Assign the modified points to the new trajectory
           new_traj.joint_trajectory.points = points

           # Return the new trajecotry
           return new_traj
       

class ArmKinematicsControllerMoveItAndURScript(ArmKinematicsControllerMoveIt):

    def __init__(self):
        self.start_moveit()  
        self.urscript_publisher = rospy.Publisher('/ur_driver/URScript', String, queue_size=10)
    
    def arm_controller_move_to(self, position, orientation):
        rospy.loginfo("**** Moving using ARM controller")   
        pose_string = self.convertRosPoseToURScriptPose(position, orientation)
        acceleration = 0.01
        velocity = 0.05
        time = 0
        blend_radius = 0
        self.urscript_publisher.publish("movel(%s, a=%s, v=%s, t=%s, r=%s)" % (pose_string, acceleration, velocity, time, blend_radius))
        # These two lines appear to reset MoveIt so we can mix the two different types
        # of control.
        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)

        return True    

    def convertRosPoseToURScriptPose(self, position, orientation):
        pose_string = "p["
        pose_string = pose_string + str(-position[0] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[0]) + ", "
        pose_string = pose_string + str(position[1] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[1]) + ", "
        pose_string = pose_string + str(position[2] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[2]) + ", "

        pose_string = pose_string + "0.0, 3.142, 0.0]"
        #return "p[-0.5, 0.0, 0.0, 0.0, 3.142, 0.0]"    
        rospy.loginfo(pose_string)
        return pose_string   

#######################################################################################        

class BladeController():
    def __init__(self):
        pass

class BladeControllerUr10(BladeController):
    def __init__(self):
        self.set_blade_voltage()
        self.blade_cut()
        self.blade_release()

    def set_blade_voltage(self):
        print("Setting voltage of digital IO")
        if DISABLE_IO:
            return
        io_msg = SetIO()
        io_msg.fun = UR10_DIGITAL_SET_VOLTAGE
        io_msg.state = UR10_DIGITAL_IO_VOLTAGE    
        service_proxy = rospy.ServiceProxy('/ur_driver/set_io', io_msg)
        service_proxy(4, 8, 12)

    def blade_cut(self):
        print("== ACTIVATING BLADE!!!")
        self.blade_IO(UR10_BLADE_PIN8, 0)
        self.blade_IO(UR10_BLADE_PIN9, 1)
        return True

    def blade_release(self):    
        print("== RETRACTING BLADE!!!")
        self.blade_IO(UR10_BLADE_PIN8, 1)
        self.blade_IO(UR10_BLADE_PIN9, 0)
        return True

    def blade_IO(self, pin, voltage_level):
        print("BladeIO Pin " + str(pin) + " to level " + str(voltage_level))
        if DISABLE_IO:
            return
        # https://github.com/ThomasTimm/ur_modern_driver/issues/61 
        io_msg = SetIO()
        io_msg.fun = UR10_DIGITAL_IO_OUT
        #io_msg.pin = UR10_BLADE_PIN
        io_msg.pin = pin
        io_msg.state = voltage_level    
        service_proxy = rospy.ServiceProxy('/ur_driver/set_io', SetIO)
        service_proxy(UR10_DIGITAL_IO_OUT, pin, voltage_level)



#######################################################################################

def publish_status_message(message):
        rospy.loginfo(message)
        Status_publisher.publish(message)

def get_position_from_params(params):
    if (len(params)==4):
        x = float(params[1])
        y = float(params[2])
        z = float(params[3])
        position = [x, y, z]
        return position
    else:
        return None        

def subtract_vectors(vector1, vector2):
    vector3 = [0.0, 0.0, 0.0]
    for i in range(0,len(vector1)):
        vector3[i] = vector1[i] - vector2[i]
    return vector3        

def add_vectors(vector1, vector2):
    vector3 = [0.0, 0.0, 0.0]
    for i in range(0,len(vector1)):
        vector3[i] = vector1[i] + vector2[i]
    return vector3        

# End of MoveIt routines

# Miscellaneous commands

def reload_scan_position():
    x = rospy.get_param(SCAN_POSITION_PARAM + '/x')
    y = rospy.get_param(SCAN_POSITION_PARAM + '/y')
    z = rospy.get_param(SCAN_POSITION_PARAM + '/z')
     
    return ([x, y, z], SCAN_ORIENTATION)    

def initialize_scan_position():
    rospy.set_param(SCAN_POSITION_PARAM + '/x', SCAN_POSITION[0])
    rospy.set_param(SCAN_POSITION_PARAM + '/y', SCAN_POSITION[1])
    rospy.set_param(SCAN_POSITION_PARAM + '/z', SCAN_POSITION[2])

def trigger_fake_image_snapshot():
    print("Triggering fake image snapshot...")
    Snapshot_publisher.publish('fake_image')

def trigger_camera_snapshot():
    print("Triggering fake image snapshot...")
    Snapshot_publisher.publish('camera_image')

def take_snapshot():
    print("Taking snapshot...")
    Snapshot_publisher.publish('fake_lettuces')


# Communications   

def get_config():
    global IS_A_SIMULATION, DISABLE_MOVEMENT, DISABLE_IO

    IS_A_SIMULATION = rospy.get_param(VEGEBOT_SIMULATION_PARAM)   
    if (IS_A_SIMULATION):
        DISABLE_IO = True

def set_defaults():
    initialize_scan_position()   

def set_up_ros_node():         
    rospy.init_node('vegebot_commander', anonymous=True)
    
def set_up_command_listener():
    print("== Setting up listener...")
    # In ROS, nodes are uniquely named. If two nodes with the same
    # node are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    #rospy.init_node('vegebot_commander', anonymous=True)
    #prepare_snapshot_publisher()
    rospy.Subscriber("vegebot_commands", String, callback)

def callback(data):
    print
    rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
    params = data.data.split()
    command = params[0]
    position = get_position_from_params(params)
    if (position != None):
        Vegebot_arm.set_target_position(position)
    if (command=='park'):
        Vegebot_arm.action_park()
    elif (command=='pick'):
        Vegebot_arm.action_full_pick_sequence()
    elif (command=='detect'):
        take_snapshot()
    elif (command=='detect_image'):
        Vegebot_arm.action_scan_position()
        print("Generating fake image...")
        trigger_fake_image_snapshot()
    elif (command=='detect_camera'):
        Vegebot_arm.action_scan_position()
        print("Generating fake image...")
        trigger_camera_snapshot()
    elif (command=='pregrasp'):
        Vegebot_arm.action_pregrasp() 
    elif (command=='down'):
        Vegebot_arm.action_down() 
    elif (command=='cut'):
        Vegebot_arm.action_cut() 
    elif (command=='up'):
        Vegebot_arm.action_up() 
    elif (command=='place'):
        Vegebot_arm.action_place() 
    elif (command=='release'):
        Vegebot_arm.action_release() 

def set_up_snapshot_publisher():
    global Snapshot_publisher 
    Snapshot_publisher = rospy.Publisher('/vegebot/lettuce_test/take_snapshot',
                                            String,
                                            queue_size=10)

def set_up_status_topic():
    global Status_publisher         
    Status_publisher = rospy.Publisher(VEGEBOT_STATUS_TOPIC, String, queue_size=10)



####################### MOVEIT STUFF STARTS HERE ################################################    


# Main Loop of module

if __name__ == '__main__':
    print("Vegebot_Commander is listening for commands.")
    get_config()
    set_defaults()
    set_up_ros_node()

    Vegebot_arm = ArmController()

    set_up_status_topic()
    set_up_snapshot_publisher()
    set_up_command_listener()

    rospy.spin()

