#!/usr/bin/env python

import rospy
from std_msgs.msg import String, Bool

import math
import sys
import time
import copy
from copy import deepcopy
import moveit_commander
from moveit_commander import MoveGroupCommander, PlanningSceneInterface, RobotCommander
import moveit_msgs.msg
import geometry_msgs.msg
from ur_msgs.srv import SetIO
import tf
from vegebot_msgs.msg import MarkerCorners, CalibrationRecords 

from moveit_msgs.msg import RobotTrajectory
from moveit_msgs.msg import Constraints, OrientationConstraint
from trajectory_msgs.msg import JointTrajectoryPoint
from geometry_msgs.msg import PoseStamped, Pose

#import ur_msgs

#BUCKET_CENTRE_OFFSET = 0.13
BUCKET_CENTRE_OFFSET = 0.0

VEGEBOT_SIMULATION_PARAM = "/vegebot/simulation"
VEGEBOT_STATUS_TOPIC = "/vegebot/status"
MARKER_CORNERS_TOPIC_NAME = '/vegebot/marker'
CALIBRATION_RECORDS_TOPIC_NAME = '/vegebot/calibration'

IS_A_SIMULATION = False
DISABLE_MOVEMENT = False
DISABLE_IO = False 
CARTESIAN_APPROACH = True

PICK_POSITION = [ 1.0, 0.0, 0.5]
#PICK_ORIENTATION= [ 0.5, -0.5, -0.5, -0.5]
PICK_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]

PARK_POSITION = [ 0.38309, -0.39763, 0.93282]
PARK_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]

#PLACE_POSITION = [ -0.2, -0.7, 1.2]
#PLACE_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]
PREPLACE_POSITION = [ 0.5, 0.5, 1.2]
PLACE_POSITION = [ 0.0, 0.5, 1.2]
PLACE_ORIENTATION = [ 0.0, 0.707106781, 0.0, 0.707106781]

SCAN_POSITION = [ 0.9, 0.0, 0.8]
SCAN_ORIENTATION= [ 0.5, -0.5, -0.5, -0.5]
SCAN_POSITION_PARAM = '/vegebot/scan_position'

#END_EFFECTOR_TO_LETTUCE_Z = 0.095
#END_EFFECTOR_TO_LETTUCE_Z = 0.0
END_EFFECTOR_TO_LETTUCE_Z = -0.14

#PREGRASP_OFFSET = [0.0, 0.0, 0.7]
#PREGRASP_OFFSET = [0.0, 0.0, 0.3]
PREGRASP_OFFSET = [0.0, 0.0, 0.5]

TARGET_END_EFFECTOR_OFFSET = [0.0, 0.0, END_EFFECTOR_TO_LETTUCE_Z]

BASE_ORIGIN_TO_URSCRIPT_ORIGIN = [0.0, 0.0, -0.58]
#BASE_ORIGIN_TO_URSCRIPT_ORIGIN = [0.0, 0.0, -0.21]

URF10_ORIGIN = [0.0, 0.0, 0.0]

MAX_PLANNING_ATTEMPTS = 10

UR10_DIGITAL_IO_OUT = 1
UR10_BLADE_PIN8 = 16
UR10_BLADE_PIN9 = 17
UR10_DIGITAL_SET_VOLTAGE=4
UR10_DIGITAL_IO_VOLTAGE=12

URSCRIPT_DISTANCE_TO_GOAL = 0.02

VELOCITY_SCALE = 0.75

SHAKE_Y_OFFSET = 0.08
SHAKE_CYCLES = 4

Robot = 0
Scene = 0
Manipulator = 0
Snapshot_publisher = 0
Next_action = None
Last_action = None
Current_reference_position = []
Status_publisher = None
Vegebot_arm = None
Vegebot_calibration_topic = None

TILT_ADJUST_ANGLE = 3.142 / 20.0
DEFAULT_TILT = [3.14159, 3.14159, 3.14159]

# MoveIt routines     

CALIBRATION_POS_X = [0.6, 0.55, 0.4]
#CALIBRATION_POS_X = [0.65, 0.65, 0.4]
CALIBRATION_POS_Y = [0.3, -0.55, -0.1]
CALIBRATION_NEUTRAL = [0.4, 0.3]

#CALIBRATION_POS_X = [0.65, 0.55, 0.55]
#CALIBRATION_POS_Y = [0.0, -0.3, 0.1]

Marker_centre_valid = False
Marker_centre = (0, 0)

#CALIBRATION_POS_X = [1.0, 0.7, 0.4]
#CALIBRATION_POS_Y = [-0.14, -0.7, -0.3]

############################# Arm Controller #####################################        

class ArmController():

    def __init__(self):
        global IS_A_SIMULATION
        self.blade_strategy = BladeControllerUr10()
        if (IS_A_SIMULATION):
            self.kinematics_controller = ArmKinematicsControllerMoveIt()
        else:
            self.kinematics_controller = ArmKinematicsControllerMoveItAndURScript()
        self.movement_strategy = MovementStrategyWithMixedControl(self.kinematics_controller)
        self.tilt_values = [0.0, 0.0, 0.0]
        self.action_reset_tilt()

    def set_target_position(self, position):
        position = self.offset_end_effector_from_lettuce(position)

        self.pregrasp_position = add_vectors(position, PREGRASP_OFFSET)
        self.pregrasp_position = add_vectors(self.pregrasp_position, TARGET_END_EFFECTOR_OFFSET)
        self.target_position = add_vectors(position, TARGET_END_EFFECTOR_OFFSET)

    def action_park(self):
        self.log("Parking...")
        #self.kinematics_controller.move_to(PARK_POSITION, PARK_ORIENTATION)  
        self.movement_strategy.move_park()  
        if (self.blade_strategy.blade_release()):
            return (True, "Park succeeded.", "pregrasp")
        else:
            return (False, "Release failed.", "release")

    def action_pregrasp(self):
        self.log("Executing pregrasp...")
        if (self.movement_strategy.move_pregrasp(self.pregrasp_position)):
            return (True, "Pregrasp succeeded.", "down")
        else:
            return (False, "Pregrasp FAILED.", "pregrasp")

    def action_down(self):
        self.log("Executing down...")
        if (self.movement_strategy.move_down(self.target_position)):
            return (True, "Down succeeded.", "cut")
        else:
            return (False, "Down FAILED.", "down")

    def action_cut(self):
        self.log("Executing cut...")
        if (self.blade_strategy.blade_cut()):
            return (True, "Cut succeeded.", "up")
        else:
            return (False, "Cut FAILED.", "cut")

    def action_up(self):
        self.log("Executing up...")
        if (self.movement_strategy.move_up(self.pregrasp_position)):
            return (True, "Up succeeded.", "place")
        else:
            return (False, "Up FAILED.", "up")

    def action_place(self):
        self.log("Executing place...")
        #if (self.movement_strategy.move_place()):
        #    return (True, "Place succeeded.", "release")
        #else:
        #    return (False, "Place FAILED.", "place")
        (x, y, z) = self.movement_strategy.get_current_wrist()
        y += 0.3
        rospy.loginfo("PLACING")
        if (self.movement_strategy.move_to_x([x, y, z])):
            return (True, "Place succeeded.", "release")
        else:
            return (False, "Place FAILED.", "place")

    def action_release(self):
        self.log("Executing release...")
        if (self.blade_strategy.blade_release()):
            return (True, "Release succeeded.", "pregrasp")
        else:
            return (False, "Release FAILED.", "release")

    def action_shake(self):
        self.log("Shake my booty...")
        if (self.movement_strategy.move_shake()):
            return (True, "Shake succeeded.", "pregrasp")
        else:
            return (False, "Shake FAILED.", "release")

    def action_reset_tilt(self):
        self.log("RESET TILT")
        self.tilt_values[0] = DEFAULT_TILT[0]
        self.tilt_values[1] = DEFAULT_TILT[1]
        self.tilt_values[2] = DEFAULT_TILT[2]
        self.convert_tilt_to_quaternion()

    def action_tilt(self, axis, direction):
        self.log("TILT!")
        if ((axis>=0) and (axis<=2)):
            delta = direction * TILT_ADJUST_ANGLE
            self.tilt_values[axis] = self.tilt_values[axis] + delta
            self.log("Adjusted axis " + str(axis) + " by " + str(delta))
        else:
            self.log("Axis " + str(axis) + " out of range.")  
        self.convert_tilt_to_quaternion()

    def action_calibrate(self):
        self.log('CALIBRATING!!!!')  
        calibration_records = []
        for i in range(0, 3):
            x = CALIBRATION_POS_X[i]
            y = CALIBRATION_POS_Y[i]
            z = self.movement_strategy.get_current_wrist_z()
            self.log("moving...")
            self.movement_strategy.move_calibration_pos(x, y, z)
            self.log("moved")
            rospy.sleep(2)
            aruco_position = get_aruco_position()
            if (aruco_position==None):
                "Aborting calibration..."
                return
            (u, v) = aruco_position
            calibration_records.append((x, y, z, u, v))
        self.log("Results:")
        self.log(calibration_records)
        publish_calibration_params(calibration_records)
        self.movement_strategy.move_calibration_pos(CALIBRATION_NEUTRAL[0], CALIBRATION_NEUTRAL[1], z)
    
    def convert_tilt_to_quaternion(self):        
        quaternion = tf.transformations.quaternion_from_euler(self.tilt_values[0], self.tilt_values[1], self.tilt_values[2])
        self.log("--------------------------")
        self.log(self.tilt_values)
        self.log(quaternion)


    def action_full_pick_sequence(self):
        self.log("Executing full pick and place sequence...")
        it_worked, message, next_state = self.action_pregrasp()
        if (it_worked):
            it_worked, message, next_state = self.action_down()
            if (it_worked):
                it_worked, message, next_state = self.action_cut()
                if (it_worked):
                    it_worked, message, next_state = self.action_up()
                    if (it_worked):
                        it_worked, message, next_state = self.action_place()
                        if (it_worked):
                            it_worked, message, next_state = self.action_release()
                        else:
                            return (False, "Place failed.", "place")
                    else:    
                        return (False, "Up failed.", "place")
                else:
                    return (False, "Cut failed.", "place")
            else:
                return (False, "Down failed.", "place")
        else:
            return (False, "Pregrasp failed.", "place")
        return (it_worked, message, next_state) 

    def action_scan_position(self):
        print("Moving to camera position...")
        position, orientation = reload_scan_position()
        #self.kinematics_controller.move_to(position, orientation)  
        self.movement_strategy.move_scan(position, orientation)
                        
    def log(self, message):
        rospy.loginfo(message)   

    def offset_end_effector_from_lettuce(self, position):
        position[0] = position[0] + BUCKET_CENTRE_OFFSET
        position[2] = position[2] + END_EFFECTOR_TO_LETTUCE_Z
        return position


#######################################################################################        

######################## CALIBRATION #############################################

def set_up_marker_listener():
    print("== Setting up marker listener...")
    rospy.Subscriber(MARKER_CORNERS_TOPIC_NAME, MarkerCorners, marker_received)

def marker_received(message):
    global Marker_centre_valid, Marker_centre

    if (message.detected):
      Marker_centre = (message.cx, message.cy)
      #print("Received marker with centroid " + str(Marker_centre))
      Marker_centre_valid = True
      #print('*********************************************************************')   
    else:
      Marker_centre_valid = False
      #print("No marker visible")   

def get_aruco_position():
    if (Marker_centre_valid):
        return Marker_centre
    else:
        rospy.info('CALIBRATION ERROR: MARKER NOT DETECTED')  
        return None  

def publish_calibration_params(records):
    m = CalibrationRecords()
    m.x0 = records[0][0]
    m.y0 = records[0][1]
    m.z0 = records[0][2]
    m.u0 = records[0][3]
    m.v0 = records[0][4]
    m.x1 = records[1][0]
    m.y1 = records[1][1]
    m.z1 = records[1][2]
    m.u1 = records[1][3]
    m.v1 = records[1][4]
    m.x2 = records[2][0]
    m.y2 = records[2][1]
    m.z2 = records[2][2]
    m.u2 = records[2][3]
    m.v2 = records[2][4]
    Vegebot_calibration_topic.publish(m)
    rospy.loginfo("CALIBRATION PUBLISHED")

def set_up_calibration_publisher():
    global Vegebot_calibration_topic
    Vegebot_calibration_topic = rospy.Publisher(CALIBRATION_RECORDS_TOPIC_NAME,
                                                CalibrationRecords,
                                                queue_size=10)
    return Vegebot_calibration_topic


####################################################################################


class MovementStrategy():
    def __init__(self, kinematics_controller):
        self.kinematics_controller = kinematics_controller

    def move_park(self):
        return self.kinematics_controller.move_to(PARK_POSITION, PARK_ORIENTATION)  

    def move_pregrasp(self, pregrasp_position):
        print("== Moving to pregrasp position...")
        return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_down(self, position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Approach lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to(position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(position, PICK_ORIENTATION)

    def move_up(self, pregrasp_position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Retreat from lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to(pregrasp_position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_place(self):
        if self.kinematics_controller.move_to(PREPLACE_POSITION, PLACE_ORIENTATION):
            return self.kinematics_controller.move_to(PLACE_POSITION, PLACE_ORIENTATION)
        return False    

    def move_scan(self, position, orientation):
        self.kinematics_controller.move_to(position, orientation)      

    def move_shake(self):
        current_position = self.kinematics_controller.getCurrentPosition();  
        min_position = [current_position[0], current_position[1] - SHAKE_Y_OFFSET, current_position[2]]      
        max_position = [current_position[0], current_position[1] + SHAKE_Y_OFFSET, current_position[2]] 
        for i in range(1, SHAKE_CYCLES):
            self.kinematics_controller.move_to(min_position, PICK_ORIENTATION)                 
            self.kinematics_controller.move_to(max_position, PICK_ORIENTATION)  
        return self.kinematics_controller.move_to(current_position, PICK_ORIENTATION)     

    def log(self, message):
        rospy.loginfo(message)   

    def get_current_wrist_z(self):
        return self.kinematics_controller.get_current_wrist_z()    

    def get_current_wrist(self):
        return self.kinematics_controller.get_current_wrist()    


class MovementStrategyDirect(MovementStrategy):
    pass

class MovementStrategyWithMixedControl(MovementStrategy):

    def move_to_x(self, position):
        return self.kinematics_controller.arm_controller_move_to(position, PARK_ORIENTATION)    

    def move_up(self, pregrasp_position):
        return self.kinematics_controller.arm_controller_move_to(pregrasp_position, PICK_ORIENTATION)    

    def move_down(self, pregrasp_position):
        return self.kinematics_controller.arm_controller_move_to(pregrasp_position, PICK_ORIENTATION)    

    def move_place(self):
        return self.kinematics_controller.arm_controller_move_to(PLACE_POSITION, PLACE_ORIENTATION)        

    def move_scan(self, position, orientation):
        return self.kinematics_controller.arm_controller_move_to(position, orientation)          

    def move_park(self):
        return self.kinematics_controller.arm_controller_move_to(PARK_POSITION, PARK_ORIENTATION)  

    def move_pregrasp(self, pregrasp_position):
        return self.kinematics_controller.arm_controller_move_to(pregrasp_position, PICK_ORIENTATION)

    def move_calibration_pos(self, x, y, z):
        self.log("Attempting to calibrate at " + str(x) + " "+ str(y) + " "+ str(z))
        return self.kinematics_controller.arm_controller_move_to([x, y, z], PICK_ORIENTATION)    


class MovementStrategyWithWaypoints(MovementStrategy):

    def move_up(self, pregrasp_position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== MovementStrategyWithWaypoints: Retreat from lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to_with_orientation_constraint(pregrasp_position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(pregrasp_position, PICK_ORIENTATION)

    def move_down(self, position):
        global CARTESIAN_APPROACH, PICK_ORIENTATION
        print("== Approach lettuce...")
        if (CARTESIAN_APPROACH):
            return self.kinematics_controller.cartesian_move_to_with_orientation_constraint(position, PICK_ORIENTATION)
        else:
            return self.kinematics_controller.move_to(position, PICK_ORIENTATION)

#######################################################################################        

class ArmKinematicsControllerMoveIt():

    def __init__(self):
        self.start_moveit()

    def start_moveit(self):
        global Robot, Scene, Manipulator   

        print("== Setting up MoveIt!")
        moveit_commander.roscpp_initialize(sys.argv)
        Robot = RobotCommander() 
        print("== Getting Robot Groups")
        print(Robot.get_group_names())
        Scene = PlanningSceneInterface()
        Manipulator = MoveGroupCommander("manipulator")
        Manipulator.allow_replanning(True)
        print Robot.get_current_state()

    def arm_controller_move_to(self, position, orientation):
        return self.move_to(position, orientation)

    def getCurrentPosition(self):
        global Manipulator   
        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)
        ros_position = current_pose.pose.position
        current_position = [ros_position.x, ros_position.y, ros_position.z]
        return current_position        

    def move_to(self, position, orientation):
        global Manipulator

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        print("Moving...")
        print "== Setting target"
        pose_target = self.new_pose(position, orientation)
        Manipulator.set_pose_target(pose_target)
        #print Robot.get_current_state()

        print("== Devising plan")
        attempts = 0
        trajectory = None
        while (attempts < MAX_PLANNING_ATTEMPTS):
            print
            print "Planning attempt %s" % attempts
            trajectory = Manipulator.plan()
            if (self.plan_has_succeeded(trajectory)):
                break
            attempts = attempts + 1    
        if (not self.plan_has_succeeded(trajectory)):
            print("********* Could not find plan after %s attempts ********" % attempts)
            return False

        print("== Moving to target pose...")
        scaled_trajectory = self.scale_trajectory_speed(trajectory, VELOCITY_SCALE)
        result = Manipulator.execute(scaled_trajectory)
        print("----------------------------")
        print result
        print("----------------------------")
        # This following get_current_state() call appears to be necessary to normalize 
        # joint angles
        workaround = Robot.get_current_state()
        rospy.loginfo("== Move complete!")
        return result
        # return True

    def cartesian_move_to(self, position, orientation):
        global Manipulator

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        end_effector_link = Manipulator.get_end_effector_link()
        start_pose = Manipulator.get_current_pose(end_effector_link).pose
        end_pose = deepcopy(self.new_pose(position, orientation))
        waypoints=[]
        # Don-t add start point! 
        # http://answers.ros.org/question/253004/moveit-problem-error-trajectory-message-contains-waypoints-that-are-not-strictly-increasing-in-time/
        #waypoints.append(deepcopy(start_pose))
        waypoints.append(end_pose)

        fraction = 0.0
        max_tries = 100
        attempts = 0
        eef_step = 0.01
        jump_threshold = 0.0
        avoid_collisions = True
        while fraction < 1.0 and attempts < max_tries:
            (plan, fraction) = Manipulator.compute_cartesian_path(
                                            waypoints,
                                            eef_step,
                                            jump_threshold,
                                            avoid_collisions)
            attempts += 1
            if attempts % 100 == 0:
                rospy.loginfo("Still attempting cartesian after " + str(attempts) + " attempts...")
        if fraction==1.0:
            rospy.loginfo("******** Successfully found Carteian trajectory.")
            rospy.loginfo(start_pose.position)
            rospy.loginfo(end_pose.position)
            scaled_plan = self.scale_trajectory_speed(plan, VELOCITY_SCALE)
            Manipulator.execute(scaled_plan)
            workaround = Robot.get_current_state()
            rospy.loginfo("******** Successfully executed Carteian trajectory.")
            return True
        else:
            rospy.loginfo("Failed to find Cartesian trajectory after " + str(attempts) + " attempts...")
            return False

    def cartesian_move_to_with_orientation_constraint(self, position, orientation):
        global Manipulator

        rospy.loginfo("*** Adding vertical constraint ***")

        if DISABLE_MOVEMENT:
            rospy.sleep(3)
            return True

        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)
        start_pose = current_pose.pose
        end_pose = deepcopy(self.new_pose(position, orientation))
        waypoints=[]
        # Don-t add start point! 
        # http://answers.ros.org/question/253004/moveit-problem-error-trajectory-message-contains-waypoints-that-are-not-strictly-increasing-in-time/
        #waypoints.append(deepcopy(start_pose))
        waypoints.append(end_pose)

        # Create a contraints list and give it a name
        constraints = Constraints() 
        constraints.name = "Keep bucket vertical"
        # Create an orientation constraint for the right gripper
        orientation_constraint = OrientationConstraint()
        orientation_constraint.header = current_pose.header
        orientation_constraint.link_name = end_effector_link
        orientation_constraint.orientation.x = start_pose.orientation.x
        orientation_constraint.orientation.y = start_pose.orientation.y
        orientation_constraint.orientation.z = start_pose.orientation.z
        orientation_constraint.orientation.w = start_pose.orientation.w
        orientation_constraint.absolute_x_axis_tolerance = 0.1
        orientation_constraint.absolute_y_axis_tolerance = 0.1
        orientation_constraint.absolute_z_axis_tolerance = 3.14
        orientation_constraint.weight = 1.0        
        # Append the constraint to the list of contraints
        constraints.orientation_constraints.append(orientation_constraint)
        # Set the path constraints on the right_arm
        Manipulator.set_path_constraints(constraints)

        fraction = 0.0
        max_tries = 100
        attempts = 0
        eef_step = 0.01
        jump_threshold = 0.0
        avoid_collisions = True
        while fraction < 1.0 and attempts < max_tries:
            (plan, fraction) = Manipulator.compute_cartesian_path(
                                            waypoints,
                                            eef_step,
                                            jump_threshold,
                                            avoid_collisions)
            attempts += 1
            if attempts % 100 == 0:
                rospy.loginfo("Still attempting cartesian after " + str(attempts) + " attempts...")
        if fraction==1.0:
            rospy.loginfo("******** Successfully found Carteian trajectory.")
            rospy.loginfo(start_pose.position)
            rospy.loginfo(end_pose.position)
            scaled_plan = self.scale_trajectory_speed(plan, VELOCITY_SCALE)
            Manipulator.execute(scaled_plan)
            workaround = Robot.get_current_state()
            rospy.loginfo("******** Successfully executed Carteian trajectory.")
            return True
        else:
            rospy.loginfo("Failed to find Cartesian trajectory after " + str(attempts) + " attempts...")
            return False

    def plan_has_succeeded(self, trajectory):
        if (trajectory==None):
            return False
        if (len(trajectory.joint_trajectory.points)==0):
            return False
        return True        

    def new_pose(self, position, orientation):
        pose_target = geometry_msgs.msg.Pose()
        pose_target.orientation.x = orientation[0] #0.0
        pose_target.orientation.y = orientation[1] # 0.0
        pose_target.orientation.z = orientation[2] # 0.0
        pose_target.orientation.w = orientation[3] # 1.0
        pose_target.position.x = position[0] + URF10_ORIGIN[0]
        pose_target.position.y = position[1] + URF10_ORIGIN[1]
        pose_target.position.z = position[2] + URF10_ORIGIN[2]
        return pose_target

    def scale_trajectory_speed(self, traj, scale):
           # Create a new trajectory object
           new_traj = RobotTrajectory()
           
           # Initialize the new trajectory to be the same as the input trajectory
           new_traj.joint_trajectory = traj.joint_trajectory
           
           # Get the number of joints involved
           n_joints = len(traj.joint_trajectory.joint_names)
           
           # Get the number of points on the trajectory
           n_points = len(traj.joint_trajectory.points)
            
           # Store the trajectory points
           points = list(traj.joint_trajectory.points)
           
           # Cycle through all points and joints and scale the time from start,
           # as well as joint speed and acceleration
           for i in range(n_points):
               point = JointTrajectoryPoint()
               
               # The joint positions are not scaled so pull them out first
               point.positions = traj.joint_trajectory.points[i].positions

               # Next, scale the time_from_start for this point
               point.time_from_start = traj.joint_trajectory.points[i].time_from_start / scale
               
               # Get the joint velocities for this point
               point.velocities = list(traj.joint_trajectory.points[i].velocities)
               
               # Get the joint accelerations for this point
               point.accelerations = list(traj.joint_trajectory.points[i].accelerations)
               
               # Scale the velocity and acceleration for each joint at this point
               for j in range(n_joints):
                   point.velocities[j] = point.velocities[j] * scale
                   point.accelerations[j] = point.accelerations[j] * scale * scale
            
               # Store the scaled trajectory point
               points[i] = point

           # Assign the modified points to the new trajectory
           new_traj.joint_trajectory.points = points

           # Return the new trajecotry
           return new_traj
       

class ArmKinematicsControllerMoveItAndURScript(ArmKinematicsControllerMoveIt):

    def __init__(self):
        self.start_moveit()  
        self.urscript_publisher = rospy.Publisher('/ur_driver/URScript', String, queue_size=10)
    
    def arm_controller_move_to(self, position, orientation):
        rospy.loginfo("**** Moving using ARM controller") 

        urscript_command = self.generate_urscript_move_command(position, orientation)  
        self.urscript_publisher.publish(urscript_command)
        return self.wait_for_move_to_complete(position, orientation)

    def generate_urscript_move_command(self, position, orientation):
        pose_string = self.convertRosPoseToURScriptPose(position, orientation)
        acceleration = 0.05 # 0.1 gives protective stop
        velocity = 0.2 # 0.4 gives protective stop
        time = 0
        blend_radius = 0
        return "movel(%s, a=%s, v=%s, t=%s, r=%s)" % (pose_string, acceleration, velocity, time, blend_radius)           

    def wait_for_move_to_complete(self, position, orientation):
        end_effector_link = Maniffpulator.get_end_effector_link()
        time_out = 15.0 # 30.0
        start_time = time.time()
        last_cycle_time = start_time
        timeout_time = start_time + time_out
        while True:
            current_pose = Manipulator.get_current_pose(end_effector_link)
            # TODO: This won't behave as expected if the movement consists only of a rotation
            ros_position = current_pose.pose.position
            current_position = [ros_position.x, ros_position.y, ros_position.z]
            # HORRENDOUS FUDGE FACTOR. DONT KNOW WHERE THIS NUMER COMES FROM
            current_position[2] -= 0.316727
            distance_to_goal = euclidean_distance(position, current_position)
            #rospy.loginfo(str(current_position) + " / " + str(position) + " -> " + str(distance_to_goal))
            if (distance_to_goal < URSCRIPT_DISTANCE_TO_GOAL):
                rospy.loginfo("Movement completed")
                return True
            if (t > timeout_time):
                rospy.loginfo("Movement TIME OUT")
                return False

    def convertRosPoseToURScriptPose(self, position, orientation):
        pose_string = "p["
        pose_string = pose_string + str(-position[0] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[0]) + ", "
        pose_string = pose_string + str(-position[1] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[1]) + ", "
        pose_string = pose_string + str(position[2] + BASE_ORIGIN_TO_URSCRIPT_ORIGIN[2]) + ", "

        axis_angle = quaternion_to_axis_angle(orientation)

        pose_string = pose_string + str(axis_angle[0]) + ", "
        pose_string = pose_string + str(axis_angle[1]) + ", "
        pose_string = pose_string + str(axis_angle[2]) + "]"

        #pose_string = pose_string + "0.0, 3.142, 0.0]"

        rospy.loginfo(pose_string)
        return pose_string   
    
    def get_current_wrist_z(self):
        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)
        z = current_pose.pose.position.z
        z -= 0.316727
        rospy.loginfo("Wrist Z is " + str(z))
        return z;

    def get_current_wrist(self):
        end_effector_link = Manipulator.get_end_effector_link()
        current_pose = Manipulator.get_current_pose(end_effector_link)
        x = current_pose.pose.position.x
        y = current_pose.pose.position.y
        z = current_pose.pose.position.z
        z -= 0.316727
        return (x, y, z);


def euclidean_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2 + (point1[2] - point2[2])**2)         

def quaternion_to_axis_angle(orientation):
    # TODO: Last solution on https://math.stackexchange.com/questions/291110/numerically-stable-extraction-of-axis-angle-from-unit-quaternion
    return [0.0, 3.142, 0.0]
    #return [0.0, 3.142, 0.0]
    # TODO
    rospy.loginfo("Quaternion x y z w")
    rospy.loginfo(orientation)
    qx = orientation[0]
    qy = orientation[1]
    qz = orientation[2]
    qw = orientation[3]
    sin_squared = qx*qx + qy*qy + qz*qz
    if (sin_squared > 0.0):
        sin_theta = math.sqrt(sin_squared)
        k = 2.0 * math.atan2(sin_theta, qw) / sin_theta
    else:
        k = 2.0
    angle_axis = [0.0, 0.0, 0.0]    
    angle_axis[0] = qx * k
    angle_axis[1] = qy * k
    angle_axis[2] = qz * k
    rospy.loginfo("Axis-angle")
    rospy.loginfo(angle_axis)
    return angle_axis


#######################################################################################        

class BladeController():
    def __init__(self):
        pass

class BladeControllerUr10(BladeController):
    def __init__(self):
        self.set_blade_voltage()
        self.blade_cut()
        self.blade_release()

    def set_blade_voltage(self):
        print("Setting voltage of digital IO")
        if DISABLE_IO:
            return
        io_msg = SetIO()
        io_msg.fun = UR10_DIGITAL_SET_VOLTAGE
        io_msg.state = UR10_DIGITAL_IO_VOLTAGE    
        service_proxy = self.getServiceProxy()
        #service_proxy = rospy.ServiceProxy('/ur_driver/set_io', io_msg)
        service_proxy(4, 8, 12)

    def blade_cut(self):
        print("== ACTIVATING BLADE!!!")
        # Start
        self.blade_IO(UR10_BLADE_PIN8, 1)
        self.blade_IO(UR10_BLADE_PIN9, 1)
        # Cut
        self.blade_IO(UR10_BLADE_PIN8, 0)
        self.blade_IO(UR10_BLADE_PIN9, 1)
        rospy.sleep(1)
        # Clamp
        self.blade_IO(UR10_BLADE_PIN8, 0)
        self.blade_IO(UR10_BLADE_PIN9, 0)
        return True

    def blade_release(self):    
        print("== RETRACTING BLADE!!!")
        # Uncut
        self.blade_IO(UR10_BLADE_PIN8, 1)
        self.blade_IO(UR10_BLADE_PIN9, 0)
        rospy.sleep(2)
        # Unclamp
        self.blade_IO(UR10_BLADE_PIN9, 1)
        self.blade_IO(UR10_BLADE_PIN8, 1)
        return True

    def blade_IO(self, pin, voltage_level):
        print("BladeIO Pin " + str(pin) + " to level " + str(voltage_level))
        if DISABLE_IO:
            return
        # https://github.com/ThomasTimm/ur_modern_driver/issues/61 
        io_msg = SetIO()
        io_msg.fun = UR10_DIGITAL_IO_OUT
        #io_msg.pin = UR10_BLADE_PIN
        io_msg.pin = pin
        io_msg.state = voltage_level    
        # rospy.loginfo("waiting for set_io service for blade...")
        # rospy.wait_for_service('/ur_driver/set_io')
        # rospy.loginfo('Service available!')
        # service_proxy = rospy.ServiceProxy('/ur_driver/set_io', SetIO)
        service_proxy = self.getServiceProxy()
        service_proxy(UR10_DIGITAL_IO_OUT, pin, voltage_level)

    def getServiceProxy(self):
        rospy.loginfo("waiting for set_io service for blade...")
        rospy.wait_for_service('/ur_driver/set_io')
        rospy.loginfo('Service available!')
        service_proxy = rospy.ServiceProxy('/ur_driver/set_io', SetIO)
        return service_proxy         



#######################################################################################

def publish_status_message(message):
        rospy.loginfo(message)
        Status_publisher.publish(message)

def get_position_from_params(params):
    if (len(params)==4):
        x = float(params[1])
        y = float(params[2])
        z = float(params[3])
        position = [x, y, z]
        return position
    else:
        return None        

def subtract_vectors(vector1, vector2):
    vector3 = [0.0, 0.0, 0.0]
    for i in range(0,len(vector1)):
        vector3[i] = vector1[i] - vector2[i]
    return vector3        

def add_vectors(vector1, vector2):
    vector3 = [0.0, 0.0, 0.0]
    for i in range(0,len(vector1)):
        vector3[i] = vector1[i] + vector2[i]
    return vector3        

# End of MoveIt routines

# Miscellaneous commands

def reload_scan_position():
    x = rospy.get_param(SCAN_POSITION_PARAM + '/x')
    y = rospy.get_param(SCAN_POSITION_PARAM + '/y')
    z = rospy.get_param(SCAN_POSITION_PARAM + '/z')
     
    return ([x, y, z], SCAN_ORIENTATION)    

def initialize_scan_position():
    rospy.set_param(SCAN_POSITION_PARAM + '/x', SCAN_POSITION[0])
    rospy.set_param(SCAN_POSITION_PARAM + '/y', SCAN_POSITION[1])
    rospy.set_param(SCAN_POSITION_PARAM + '/z', SCAN_POSITION[2])

def trigger_fake_image_snapshot():
    print("Triggering fake image snapshot...")
    Snapshot_publisher.publish('fake_image')

def trigger_camera_snapshot():
    print("Triggering camera snapshot...")
    Snapshot_publisher.publish('camera_image')

def take_snapshot():
    print("Taking snapshot...")
    Snapshot_publisher.publish('fake_lettuces')


# Communications   

def get_config():
    global IS_A_SIMULATION, DISABLE_MOVEMENT, DISABLE_IO

    IS_A_SIMULATION = rospy.get_param(VEGEBOT_SIMULATION_PARAM)   
    if (IS_A_SIMULATION):
        DISABLE_IO = True

def set_defaults():
    initialize_scan_position()   

def set_up_ros_node():         
    rospy.init_node('vegebot_commander', anonymous=True)


def set_up_command_listener():
    print("== Setting up command listener...")
    # In ROS, nodes are uniquely named. If two nodes with the same
    # node are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    #rospy.init_node('vegebot_commander', anonymous=True)
    #prepare_snapshot_publisher()
    rospy.Subscriber("vegebot_commands", String, command_received)

def command_received(data):
    print
    rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
    params = data.data.split()
    command = params[0]
    position = get_position_from_params(params)
    if (position != None):
        Vegebot_arm.set_target_position(position)
    if (command=='park'):
        Vegebot_arm.action_park()
    elif (command=='pick'):
        Vegebot_arm.action_full_pick_sequence()
    elif (command=='detect'):
        take_snapshot()
    elif (command=='detect_image'):
        Vegebot_arm.action_scan_position()
        print("Generating fake image...")
        trigger_fake_image_snapshot()
    elif (command=='detect_camera'):
        Vegebot_arm.action_scan_position()
        print("Generating real camera image...")
        trigger_camera_snapshot()
    elif (command=='pregrasp'):
        Vegebot_arm.action_pregrasp() 
    elif (command=='down'):
        Vegebot_arm.action_down() 
    elif (command=='cut'):
        Vegebot_arm.action_cut() 
    elif (command=='up'):
        Vegebot_arm.action_up() 
    elif (command=='place'):
        Vegebot_arm.action_place() 
    elif (command=='release'):
        Vegebot_arm.action_release() 
    elif (command=='shake'):
        Vegebot_arm.action_shake() 
    elif (command=='reset_tilt'):
        Vegebot_arm.action_reset_tilt() 
    elif (command=='tilt'):
        Vegebot_arm.action_tilt(int(params[1]), int(params[2])) 
    elif (command=='calibrate'):
        Vegebot_arm.action_calibrate()    

def set_up_snapshot_publisher():
    global Snapshot_publisher 
    Snapshot_publisher = rospy.Publisher('/vegebot/lettuce_test/take_snapshot',
                                            String,
                                            queue_size=10)

def set_up_status_topic():
    global Status_publisher         
    Status_publisher = rospy.Publisher(VEGEBOT_STATUS_TOPIC, String, queue_size=10)



####################### MOVEIT STUFF STARTS HERE ################################################    


# Main Loop of module

if __name__ == '__main__':
    print("Vegebot_Commander is listening for commands.")
    get_config()
    set_defaults()
    set_up_ros_node()

    Vegebot_arm = ArmController()

    set_up_status_topic()
    set_up_snapshot_publisher()
    set_up_command_listener()
    set_up_calibration_publisher()
    set_up_marker_listener()

    rospy.spin()

